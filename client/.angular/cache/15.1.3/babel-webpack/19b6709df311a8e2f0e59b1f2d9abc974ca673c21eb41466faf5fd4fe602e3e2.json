{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ValidatorService {\n  constructor() {\n    this.nombreApellidoPattern = '([a-zA-Z]+) ([a-zA-Z]+)';\n    this.emailPattern = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\";\n  }\n  camposIguales(campo1, campo2) {\n    return group => {\n      const pass1 = group.get(campo1)?.value;\n      const pass2 = group.get(campo2)?.value;\n      if (pass1 !== pass2) {\n        group.get(campo2)?.setErrors({\n          noIguales: true\n        });\n        return {\n          noIguales: true\n        };\n      }\n      group.get(campo2)?.setErrors(null);\n      return null;\n    };\n  }\n}\nValidatorService.ɵfac = function ValidatorService_Factory(t) {\n  return new (t || ValidatorService)();\n};\nValidatorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ValidatorService,\n  factory: ValidatorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,gBAAgB;EAK3BC;IAHO,0BAAqB,GAAY,yBAAyB;IAC1D,iBAAY,GAAsB,2CAA2C;EAEpE;EAEhBC,aAAa,CAAEC,MAAa,EAAEC,MAAa;IAEzC,OAAQC,KAAsB,IAA2B;MAEvD,MAAMC,KAAK,GAAGD,KAAK,CAACE,GAAG,CAACJ,MAAM,CAAC,EAAEK,KAAK;MACtC,MAAMC,KAAK,GAAGJ,KAAK,CAACE,GAAG,CAACH,MAAM,CAAC,EAAEI,KAAK;MAEtC,IAAGF,KAAK,KAAKG,KAAK,EAAC;QACjBJ,KAAK,CAACE,GAAG,CAACH,MAAM,CAAC,EAAEM,SAAS,CAAC;UAACC,SAAS,EAAC;QAAI,CAAC,CAAC;QAC9C,OAAO;UAACA,SAAS,EAAC;QAAI,CAAC;;MAEzBN,KAAK,CAACE,GAAG,CAACH,MAAM,CAAC,EAAEM,SAAS,CAAC,IAAI,CAAC;MAClC,OAAO,IAAI;IAEb,CAAC;EACH;;AAtBWV,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAY,SAAhBZ,gBAAgB;EAAAa,YAFf;AAAM","names":["ValidatorService","constructor","camposIguales","campo1","campo2","group","pass1","get","value","pass2","setErrors","noIguales","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Miguel\\Documents\\proyecos\\S6-09-T-Angular\\client\\src\\app\\services\\validator.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ValidatorService {\r\n\r\n  public nombreApellidoPattern  :string = '([a-zA-Z]+) ([a-zA-Z]+)';\r\n  public emailPattern           : string = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\";\r\n\r\n  constructor() { }\r\n\r\n  camposIguales( campo1:string, campo2:string ){\r\n    \r\n    return (group: AbstractControl): ValidationErrors|null => {\r\n\r\n      const pass1 = group.get(campo1)?.value;\r\n      const pass2 = group.get(campo2)?.value;\r\n      \r\n      if(pass1 !== pass2){\r\n        group.get(campo2)?.setErrors({noIguales:true});\r\n        return {noIguales:true}\r\n      }\r\n      group.get(campo2)?.setErrors(null);\r\n      return null;\r\n    \r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}