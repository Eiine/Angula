{"ast":null,"code":"import { catchError, map, of, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  get usuario() {\n    return {\n      ...this._user\n    };\n  }\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = environment.baseUrl;\n  }\n  register(name, email, password) {\n    const url = `${this.baseUrl}/users`;\n    const body = {\n      name,\n      email,\n      password\n    };\n    return this.http.post(url, body).pipe(tap(({\n      valid,\n      token\n    }) => {\n      if (valid) {\n        localStorage.setItem('token', token);\n      }\n    }), map(resp => resp.valid), catchError(err => of(err.error.msg)));\n  }\n  login(email, password) {\n    const url = `${this.baseUrl}/login`;\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(url, body).pipe(tap(resp => {\n      if (resp.valid) {\n        localStorage.setItem('token', resp.token);\n        this._user = {\n          _id: resp.user._id,\n          name: resp.user.name,\n          email: resp.user.email,\n          valid: true\n        };\n      }\n    }), map(resp => resp.valid), catchError(err => of(err.error.msg)));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.router.navigateByUrl('inicio');\n  }\n  validarToken() {\n    if (localStorage.getItem('token') !== null) {\n      return of(true);\n    } else {\n      return of(false);\n    }\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,EAAcC,EAAE,EAAEC,GAAG,QAAQ,MAAM;AAC3D,SAASC,WAAW,QAAQ,8BAA8B;;;;AAO1D,OAAM,MAAOC,WAAW;EAKtB,IAAIC,OAAO;IACT,OAAO;MAAC,GAAG,IAAI,CAACC;IAAK,CAAC;EACxB;EAIAC,YAAoBC,IAAe,EACfC,MAAa;IADb,SAAI,GAAJD,IAAI;IACJ,WAAM,GAANC,MAAM;IAVlB,YAAO,GAAWN,WAAW,CAACO,OAAO;EAUR;EAGrCC,QAAQ,CAACC,IAAW,EAAEC,KAAY,EAAEC,QAAe;IACjD,MAAMC,GAAG,GAAI,GAAG,IAAI,CAACL,OAAO,QAAQ;IACpC,MAAMM,IAAI,GAAG;MAACJ,IAAI;MAACC,KAAK;MAACC;IAAQ,CAAC;IAElC,OAAO,IAAI,CAACN,IAAI,CAACS,IAAI,CAAeF,GAAG,EAACC,IAAI,CAAC,CAC5CE,IAAI,CACHhB,GAAG,CAAC,CAAC;MAACiB,KAAK;MAAEC;IAAK,CAAC,KAAI;MACrB,IAAID,KAAK,EAAE;QACTE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAM,CAAC;;IAEzC,CAAC,CAAC,EACFpB,GAAG,CAACuB,IAAI,IAAIA,IAAI,CAACJ,KAAK,CAAC,EACvBpB,UAAU,CAACyB,GAAG,IAAIvB,EAAE,CAACuB,GAAG,CAACC,KAAK,CAACC,GAAG,CAAC,CAAC,CACnC;EACL;EAEAC,KAAK,CAACd,KAAY,EAACC,QAAe;IAChC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,QAAQ;IACnC,MAAMM,IAAI,GAAG;MAACH,KAAK;MAAEC;IAAQ,CAAC;IAE9B,OAAO,IAAI,CAACN,IAAI,CAACS,IAAI,CAAeF,GAAG,EAACC,IAAI,CAAC,CAC1CE,IAAI,CACHhB,GAAG,CAACqB,IAAI,IAAG;MACT,IAAGA,IAAI,CAACJ,KAAK,EAAC;QACZE,YAAY,CAACC,OAAO,CAAC,OAAO,EAACC,IAAI,CAACH,KAAM,CAAC;QACzC,IAAI,CAACd,KAAK,GAAG;UACXsB,GAAG,EAAGL,IAAI,CAACM,IAAI,CAACD,GAAG;UACnBhB,IAAI,EAAEW,IAAI,CAACM,IAAI,CAACjB,IAAI;UACpBC,KAAK,EAACU,IAAI,CAACM,IAAI,CAAChB,KAAK;UACrBM,KAAK,EAAE;SACR;;IAGL,CAAC,CAAC,EACFnB,GAAG,CAACuB,IAAI,IAAIA,IAAI,CAACJ,KAAK,CAAC,EACvBpB,UAAU,CAACyB,GAAG,IAAIvB,EAAE,CAACuB,GAAG,CAACC,KAAK,CAACC,GAAG,CAAC,CAAC,CACrC;EACL;EAGAI,MAAM;IACJT,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACtB,MAAM,CAACuB,aAAa,CAAC,QAAQ,CAAC;EACrC;EAEAC,YAAY;IACV,IAAGZ,YAAY,CAACa,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,EAAC;MACxC,OAAOjC,EAAE,CAAC,IAAI,CAAC;KAChB,MAAI;MACH,OAAOA,EAAE,CAAC,KAAK,CAAC;;EAGpB;;AAnEWG,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA+B,SAAX/B,WAAW;EAAAgC,YAFV;AAAM","names":["catchError","map","of","tap","environment","AuthService","usuario","_user","constructor","http","router","baseUrl","register","name","email","password","url","body","post","pipe","valid","token","localStorage","setItem","resp","err","error","msg","login","_id","user","logout","removeItem","navigateByUrl","validarToken","getItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Miguel\\Documents\\proyecos\\S6-09-T-Angular\\client\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, map, Observable, of, tap } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AuthResponse, User } from '../interfaces/Auth';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  private baseUrl: string = environment.baseUrl;\r\n  private _user!:User;\r\n\r\n  get usuario(){\r\n    return {...this._user};\r\n  }\r\n\r\n\r\n\r\n  constructor(private http:HttpClient,\r\n              private router:Router) { }\r\n\r\n\r\n  register(name:string, email:string, password:string){\r\n    const url  = `${this.baseUrl}/users`;\r\n    const body = {name,email,password};\r\n\r\n    return this.http.post<AuthResponse>(url,body)\r\n    .pipe(\r\n      tap(({valid, token}) =>{\r\n        if( valid ){\r\n          localStorage.setItem('token', token!)\r\n          }\r\n      }),\r\n      map(resp => resp.valid),\r\n      catchError(err => of(err.error.msg))\r\n      ); \r\n  }\r\n\r\n  login(email:string,password:string){\r\n    const url = `${this.baseUrl}/login`;\r\n    const body = {email, password};\r\n\r\n    return this.http.post<AuthResponse>(url,body)\r\n      .pipe(\r\n        tap(resp => {\r\n          if(resp.valid){\r\n            localStorage.setItem('token',resp.token!)\r\n            this._user = {\r\n              _id : resp.user._id,\r\n              name: resp.user.name,\r\n              email:resp.user.email,\r\n              valid: true\r\n            }\r\n                      \r\n          } \r\n        }),\r\n        map(resp => resp.valid),\r\n        catchError(err => of(err.error.msg))\r\n      )\r\n  }\r\n\r\n\r\n  logout(){\r\n    localStorage.removeItem('token');\r\n    this.router.navigateByUrl('inicio');\r\n  }\r\n\r\n  validarToken(): Observable<boolean> {\r\n    if(localStorage.getItem('token') !== null){\r\n      return of(true);\r\n    }else{\r\n      return of(false);\r\n    }\r\n    \r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}